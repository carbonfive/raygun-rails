version: 2.1
executors:
  rails:
    docker:
      - image: circleci/ruby:2.6.6-node-browsers
        environment:
          BUNDLE_JOBS: 4
          BUNDLE_PATH: vendor/bundle
          PGHOST: 127.0.0.1
          PGUSER: postgres
          RAILS_ENV: test
      - image: circleci/postgres:11.2-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: app_prototype_test
          POSTGRES_PASSWORD: ""

commands:
  bundle-install:
    description: Install Ruby gems
    steps:
      - restore_cache:
          keys:
            - bundler-cache-v0-{{ arch }}-{{ checksum ".ruby-version" }}-{{ checksum "Gemfile.lock" }}
            - bundler-cache-v0-{{ arch }}-{{ checksum ".ruby-version" }}
      - run:
          name: Install new gems and remove unused gems
          command: |
            gem install bundler
            bundle check || bundle install
            bundle clean --force
      - save_cache:
          key: bundler-cache-v0-{{ arch }}-{{ checksum ".ruby-version" }}-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
  yarn-install:
    description: Install JavaScript dependencies
    steps:
      - restore_cache:
          name: Restore Yarn cache
          keys:
            - yarn-cache-v0-{{ arch }}-{{ checksum "yarn.lock" }}
            - yarn-cache-v0-{{ arch }}
      - run:
          name: Yarn install
          command: yarn install --cache-folder .yarn-cache
      - save_cache:
          key: yarn-cache-v0-{{ arch }}-{{ checksum "yarn.lock" }}
          paths:
            - .yarn-cache
  db-setup:
    description: Set up database
    steps:
      # Using structure.sql? Install postgresql-client for loading structure.
      #- run: sudo apt-get install postgresql-client
      - run:
          name: Set up database
          command: bundle exec rake db:setup
  rspec:
    description: Run RSpec tests
    steps:
      - run:
          name: Run RSpec tests in parallel
          command: |
            circleci tests glob "spec/**/*_spec.rb" > /tmp/rspec_files

            TEST_FILES=$(circleci tests split --split-by=timings --timings-type=filename < /tmp/rspec_files)

            echo -e "Testing" $(echo $TEST_FILES | wc -w) "of" $(cat /tmp/rspec_files | wc -w) "files on this container.\n"

            bundle exec rspec --format progress \
                              --format RspecJunitFormatter \
                              --out ./test-results/rspec/results.xml -- \
                              $TEST_FILES
      # Save test results, so the the timings can be used in future parallel runs
      - store_test_results:
          path: ./test-results
      # Save the test logs for debugging
      - store_artifacts:
          path: ./log/test.log
          destination: test.log
      # Save screenshots for debugging
      - store_artifacts:
          path: ./tmp/screenshots

jobs:
  install_dependencies:
    executor: rails
    steps:
      - checkout
      - bundle-install
      - yarn-install
  static_analysis:
    executor: rails
    steps:
      - checkout
      - bundle-install
      - yarn-install
      - db-setup
      # Rubocop compliance
      - run: bundle exec rubocop
      # Ensure sample_data runs without issues
      - run:
          name: Seed with sample data
          command: bundle exec rake db:sample_data
  rspec:
    executor: rails
    steps:
      - checkout
      - bundle-install
      - yarn-install
      - db-setup
      - rspec

workflows:
  version: 2
  build:
    jobs:
      - install_dependencies
      - static_analysis:
          requires:
            - install_dependencies
      - rspec:
          requires:
            - install_dependencies
